자바가 제공하는 배열과 리스트 자료 구조에 대해 학습하세요.



-배열 
연속된 메모리 공간으로 이루어져 있음
정적표현
인덱스를 이용하여 표현
장점: 인덱스를 사용하기에 검색에 용이 
단점 : 한 데이터를 삭제 하더라도 배열은 연속해야 하기때문에, 공간이 남아 메모리가 낭비, 처음 정한 배열의 크기를 수정할수없음
* 데이터의 크기가 정해져있고, 추가적인 삽입삭제가 잘 일어나지 않으며, 검색이 많은 경우 유리

//선언 배열 생성 후 초기화 하여 배열선언
int [] array;
int array = new int[3]
//배열먼저 선언 후 초기화
int [] array;
//메모리 할당 -크기가 8인 메모리를 할당
array=new array[8]
//배열 값 초기화
int[] array={1,2,3}
//데이터 삽입
array[0]=1
array[1]=2
array[2]=3

또는
for (int i=0;i<array.length;i++){
  array[i]=i+1
}

//array 클래스 
java.util.Arrays =모든 메소드는 클래스 메소드(static mehtod) 이므로, 객체를 생성하지 않고 바로 사용가능



//2차원배열
int [][]arr;
arr=new int[10][10]
대표적인 Arrays 메소드
static T[] copyOf(T[] original, int newLength)       전달받은 배열을 특정길이의 배열로 받아 변환
static void sort(Object[] a)	전달받은 배열의 모든 요소를 오름차순으로 정렬함.
static boolean equals(Object[] a, Object[] a2)	전달받은 두 배열이 같은지를 확인함.


-리스트
순서가 있는 데이터의 집합/ 비연속적 메모리공간차지/ 인덱스가 없이, 포인터를 통해 접근/ 동적크기 설정가능
장점: 포인터를통해 다음데이터 위치를 가르키고있어 삽입 삭제에 용이/메모리재사용가능
단점: 검색성능이 좋지않다, 포인터를 통해 다음 메모리를 가르키기 때문에, 추가적 메모리 공간이 발생
* 데이터 크기가 정해져 있지 않고, 삽입삭제가 많이 일어나며 검색이 적은 경우 유리

java.utill.list 포함 = 인터페이스 클래스이며, java.util.collection 인터페이스를 구현한것

//리스트 선언
List a = new ArrayList();
//값을 추가
list.add("a")
list.add("java")
//값 가져오기
string data =list.get(0).toString();
//값을 삭제
list.remove(2);
list.remove("a")

//값이 있는지 확인
list.contains("a")

-벡터 
arraylist 와 동일한 구조를 갖는다 , 자동동기화 가능, 멀티 쓰레드 환경에서 안정적 사용가능
List <String> list- new vector<>()

-linkedList => stack과 queue 자료구조를 지원하는 메소드가 존재한다
arrayList 와 linkedList 사용방법과 동일
vector는 인덱스로 관리, linkedList 는 인접한 곳을 링크하여 체인처럼 관리

대표적인 linkedList 메소드
boolean	offer(E e)	Queue에 데이터를 삽입
E	peek()	Queue/Stack에서 데이터를 제거하지 않고 단순 읽기
E	poll()	Queue에서 데이터를 제거하며 읽기
E	pop()	Stack에서 데이터를 제거하며 읽기
void	push(E e)	Stack에 데이터를 삽입
